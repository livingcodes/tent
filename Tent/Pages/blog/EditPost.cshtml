@page "/post/edit/{id}"
@model Tent.Pages.Blog.EditPostPage

<style>
  #editor{overflow-y:scroll;}
  #sugBox{position:absolute; z-index:1000;
    background-color:#fff; border:1px solid #ccc; 
    max-height:150px; overflow-y:auto;}
  .sugItm{padding:5px; cursor:pointer;}
</style>

<p>
  <a href="/blog">POSTS</a>
</p>
<h1>
  @Model.Post?.Title
</h1>
<p>
  @Model.Post?.PublishDate.ToString("M/d/yy")
  <br>
  <a href="/post/@Model.Post?.Slug">View</a>
</p>

<form method="post" class="editor">
  <label for="Id">Id</label>
  <input name="Id" id="Id" type="text" value="@Model.Post?.Id" readonly>
  <br>
  <label for="Slug">Slug</label>
  <input name="Slug" id="Slug" type="text" value="@Model.Post?.Slug">
  <br>
  <label for="Title">Title</label>
  <input name="Title" id="Title" type="text" value="@Model.Post?.Title">
  <br>
  <label for="editor">Body</label>
  <textarea name="Body" id="Body" style="display:none;">@Html.Raw(Model.Post?.Body)</textarea>
  <div name="editor" id="editor" class="html-editor" contenteditable="true"></div>
  <div id="preview" class="preview"></div>
  <br>
  <label for="PublishDate">Publish Date</label>
  <input name="PublishDate" id="PublishDate" type="text" value="@Model.Post?.PublishDate.ToString("yyyy-MM-dd HH:mm:ss")" readonly>
  <br>
  <input name="cancel" type="submit" value="Cancel">
  <input name="save" type="submit" value="Save">
</form>

<script>
  var doc = document;
  var Ŏ = (qry) => doc.querySelectorAll(qry);
  var Ŏ1 = (qry) => doc.querySelector(qry);
  Element.prototype.on = function(evtNm, fn) {
    this.addEventListener(evtNm, fn);
  }

  String.prototype.revIdx = function(i, char) {
    var offset = 1;
    var found = false;
    var j = -1;
    do {
      j = i - offset;
      var curChar = this.substring(j, j+1);
      found = curChar == char;
      offset += 1;
    } while (!found && j >= 0 && offset < 8)
    return j;
  }

  Element.prototype.rent = function(tag, cls) {
    if (!this.parentElement)
      return this;
    if (this.parentElement.tagName == tag
    &&  this.parentElement.classList.contains(cls))
      return this.parentElement;
    return this.parentElement.rent(tag, cls);
  }



  class Sug
  {
    constructor(txts, onSugClick /*(e, ᵉitm, txt)*/) {
      this.txts = txts;
      this.ᵉbox = this.#crtᵉBox(txts, onSugClick);
      this.hide();
      doc.body.appendChild(this.ᵉbox);
    }
    ᵉitms = [];

    show() {
      this.ᵉbox.style.display = "block";
    }

    hide() {
      this.ᵉbox.style.display = "none";
    }

    shown() {
      return this.ᵉbox.style.display == "block";
    }

    setLoc(lt, top) {
      this.ᵉbox.style.left = lt + "px";
      var offsetY = 20;
      this.ᵉbox.style.top = top + offsetY + "px";
    }

    search(qry) {
      this.ᵉitms.forEach(ᵉitm => {
        if (ᵉitm.innerText.startsWith(qry))
          ᵉitm.style.display = "block";
        else
          ᵉitm.style.display = "none";
      })
    }

    #crtᵉBox(txts, onSugClick) {
      var ᵉbox = doc.createElement("div");
      ᵉbox.id = "sugBox";

      txts.forEach(txt => {
        var ᵉitm = this.#crtᵉItm(txt, onSugClick);
        ᵉbox.appendChild(ᵉitm);
        this.ᵉitms.push(ᵉitm);
      });

      return ᵉbox;
    }

    #crtᵉItm(txt, onSugClick) {
      var ᵉitm = doc.createElement("div");
      ᵉitm.className = "sugItm";
      ᵉitm.textContent = txt;
      console.log("wire sug click: " + txt)
      ᵉitm.on("click", e => onSugClick(e, ᵉitm, txt));
      return ᵉitm;
    }
  }


  class Editor
  {
    constructor(ᵉhtm, ᵉedr, ᵉprv, sug) {
      this.ᵉhtm = ᵉhtm;
      this.ᵉedr = ᵉedr;
      this.ᵉprv = ᵉprv;

      this.#onHtmChngUpdPrv();
      this.#onEdrInpChng(sug);
      this.#onEdrBlurSaveCsrPos()

      this.styleSyntax();
    }

    // window, ᵉedr
    getCsrPos() {
      var sel = window.getSelection();
      if (!sel.focusNode || !sel.focusNode.parentElement.rent("html-editor"))
        return 0;
      if (sel.rangeCount == 0)
        return 0;
      var rng = sel.getRangeAt(0);
      var preRng = rng.cloneRange();
      preRng.selectNodeContents(this.ᵉedr);
      preRng.setEnd(rng.endContainer, rng.endOffset);
      var pos = preRng.toString().length;
      return pos;
    }

    // window, doc, ᵉedr
    setCsrPos(pos) {
      var sel = window.getSelection();
      var rng = doc.createRange();
      var nodeStack = [this.ᵉedr], node, charCt = 0,
        foundStart = false, stop = false;

      while (!stop && (node = nodeStack.pop())) {
        if (node.nodeType == 3) {
          var nextCharCt = charCt + node.length;
          if (!foundStart && pos >= charCt && pos <= nextCharCt) {
            rng.setStart(node, pos - charCt);
            rng.setEnd(node, pos - charCt);
            foundStart = true;
            stop = true;
          }
          charCt = nextCharCt;
        } else {
          var i = node.childNodes.length;
          while (i--) {
            nodeStack.push(node.childNodes[i]);
          }
        }
      }

      sel.removeAllRanges();
      sel.addRange(rng);
    }

    // window, doc, ᵉhtm, ᵉedr, ᵉprv
    styleSyntax() {
      var pos = this.getCsrPos();
      var htm = this.ᵉhtm.value;
      htm = htm.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
      htm = htm.replace(/(&lt;\/?)(\w+)([^&gt;]*&gt;)/g, '$1<span class="html-tag">$2</span>$3');
      this.ᵉedr.innerHTML = htm;
      this.setCsrPos(pos);
      this.ᵉprv.innerHTML = this.ᵉhtm.value;
    }

    // window
    getCaretLoc() {
      var x = 0, y = 0;
      var sel = window.getSelection();
      if (sel.rangeCount) {
        var rng = sel.getRangeAt(0).cloneRange();
        rng.collapse(true);
        var rect = rng.getClientRects()[0];
        if (rect) {
          x = rect.left;
          y = rect.top + window.scrollY;
        }
      }
      return { lt: x, top: y };
    }

    insTag(tag) {
      console.log(tag);
      var tagHtm = `<${tag}></${tag}>`;
      
      var iCsr = this.csrPos;
      var txt = this.ᵉedr.innerText;
      var iTag = txt.revIdx(iCsr, "<");
      var startTxt = txt.substring(0, iTag);
      var endTxt = txt.substring(iTag + (iCsr - iTag));
      this.ᵉedr.innerText = `${startTxt}${tagHtm}${endTxt}`;

      var _iCsr = iTag > -1 ? iTag + tag.length + 2 : iCsr;
      this.setCsrPos(_iCsr);

      this.ᵉhtm.value = this.ᵉedr.innerText;
      this.styleSyntax();
    }

    // update preview when html source changes
    #onHtmChngUpdPrv() {
      this.ᵉhtm.on('change', e => {
        this.ᵉprv.innerHTML = this.ᵉhtm.value;
      });
    }

    csrPos = 0;
    #onEdrBlurSaveCsrPos() {
      this.ᵉedr.on("blur", e => {
        this.csrPos = this.getCsrPos();
      })
    }

    #onEdrInpChng(sug) {
      this.ᵉedr.on("input", e => {
        this.ᵉhtm.value = this.ᵉedr.innerText;
        this.styleSyntax();
        if (e.inputType === "insertText" && e.data === "<") {
          var loc = this.getCaretLoc();
          sug.setLoc(loc.lt, loc.top);
          sug.show();
        } else if (e.inputType === "insertText" && sug.shown()) {
          var tagTyping = this.#getTagTyping(this.ᵉedr)
          sug.search(tagTyping);
          sug.show();
        }
        else {
          sug.hide();
        }
      });
    }

    #getTagTyping(ᵉedr) {
      var pos = this.getCsrPos();
      var i = 1;
      var found = false;
      var tagTyping = "";
      do {
        var prvChar = ᵉedr.innerText[pos - i];
        found = (prvChar == "<" || prvChar == "/")
        if (found)
          break;
        tagTyping = prvChar + tagTyping;
        i++;
      } while (!found || i < 8)
      return tagTyping;
    }
  }


  var tags = [
    'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
    'p', 'span', 'a', 'img', 'figure', 'figcaption', 'blockquote', 'pre', 'code',
    'div', 'header', 'main', 'footer', 'section', 'article', 'nav', 'aside',
    'ul', 'ol', 'li',
    'table', 'tr', 'td', 'th', 'thead', 'tbody', 'tfoot',
    'input', 'button', 'form', 'label', 'select', 'option', 'textarea',
    'script', 'style', 'link', 'meta', 'title', 'iframe',
    'details', 'summary', 'dialog', 'menu', 'menuitem',
    'canvas', 'video', 'audio', 'svg',
    'template', 'source', 'track', 'embed', 'object', 'param', 'map', 'area'
  ];

  var onSugClick = function(e, ᵉitm, txt) {
    console.log("triggered on sug. txt:" + txt)
    edr.insTag(txt);
    sug.hide();
  }
  var sug = new Sug(tags, onSugClick);
  var edr = new Editor(Ŏ1('#Body'), Ŏ1('#editor'), Ŏ1('#preview'), sug);

</script>

@section Header {
<style>
  label{width:18%; font-weight:normal; vertical-align:top;}
  input{width:81%}
  .html-editor{display:inline-block; width:45%; height:300px; font-family:consolas; border: 1px solid #ccc; padding: 5px; white-space: pre-wrap; overflow-wrap: break-word;}
  .html-tag{color:red; font-weight:bold;}
  .preview{display:inline-block; vertical-align:top; width:40%; border: 1px solid #ccc; padding: 5px; white-space: pre-wrap; overflow-wrap: break-word;}
  .editor input[type='submit']{display:inline-block; padding:5px 15px; margin:3px 0 0 0;}
  .editor input[name='save']{background-color:#0a0; color:#fff; border:1px solid #0b0;
    font-weight:bold; padding:9px 35px;}
  .editor input[name='cancel']{background-color:#dde; color:#999; border:1px solid #ddd;}
  .sugItm:hover{background-color:#eee;}
</style>
}