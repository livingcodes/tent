@page "/post/edit/{id}"
@model Tent.Pages.Blog.EditPostPage

<p>
  <a href="/blog">POSTS</a>
</p>
<h1>
  @Model.Post?.Title
</h1>
<p>
  @Model.Post?.PublishDate.ToString("M/d/yy")
  <br>
  <a href="/post/@Model.Post?.Slug">View</a>
</p>

<form method="post" class="editor">
  <label for="Id">Id</label>
  <input name="Id" id="Id" type="text" value="@Model.Post?.Id" readonly>
  <br>
  <label for="Slug">Slug</label>
  <input name="Slug" id="Slug" type="text" value="@Model.Post?.Slug">
  <br>
  <label for="Title">Title</label>
  <input name="Title" id="Title" type="text" value="@Model.Post?.Title">
  <br>
  <label for="editor">Body</label>
  <textarea name="Body" id="Body" style="display:none;">@Html.Raw(Model.Post?.Body)</textarea>
  <div name="editor" id="editor" class="html-editor" contenteditable="true"></div>
  <div id="preview" class="preview"></div>
  <br>
  <label for="PublishDate">Publish Date</label>
  <input name="PublishDate" id="PublishDate" type="text" value="@Model.Post?.PublishDate.ToString("yyyy-MM-dd HH:mm:ss")" readonly>
  <br>
  <input name="cancel" type="submit" value="Cancel">
  <input name="save" type="submit" value="Save">
</form>

<script>
  var source = document.querySelector('#Body');
  var editor = document.querySelector('#editor');
  var preview = document.querySelector('#preview');
  var suggestionBox;
  var tagList = [
    'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
    'p', 'span', 'a', 'img', 'figure', 'figcaption', 'blockquote', 'pre', 'code',
    'div', 'header', 'main', 'footer', 'section', 'article', 'nav', 'aside',
    'ul', 'ol', 'li', 
    'table', 'tr', 'td', 'th', 'thead', 'tbody', 'tfoot', 
    'input', 'button', 'form', 'label', 'select', 'option', 'textarea',
    'script', 'style', 'link', 'meta', 'title', 'iframe',
    'details', 'summary', 'dialog', 'menu', 'menuitem',
    'canvas', 'video', 'audio', 'svg',
    'template', 'source', 'track', 'embed', 'object', 'param', 'map', 'area'
  ];

  function saveCursorPosition() {
    var selection = window.getSelection();
    if (selection.rangeCount == 0)
      return 0;
    var range = selection.getRangeAt(0);
    var preCaretRange = range.cloneRange();
    preCaretRange.selectNodeContents(editor);
    preCaretRange.setEnd(range.endContainer, range.endOffset);
    var start = preCaretRange.toString().length;
    return start;
  }

  function restoreCursorPosition(position) {
    var selection = window.getSelection();
    var range = document.createRange();
    var nodeStack = [editor], node, charCount = 0, foundStart = false, stop = false;

    while (!stop && (node = nodeStack.pop())) {
      if (node.nodeType == 3) {
        var nextCharCount = charCount + node.length;
        if (!foundStart && position >= charCount && position <= nextCharCount) {
          range.setStart(node, position - charCount);
          range.setEnd(node, position - charCount);
          foundStart = true;
          stop = true;
        }
        charCount = nextCharCount;
      } else {
        var i = node.childNodes.length;
        while (i--) {
          nodeStack.push(node.childNodes[i]);
        }
      }
    }

    selection.removeAllRanges();
    selection.addRange(range);
  }

  function applySyntaxHighlighting() {
    var cursorPosition = saveCursorPosition();
    var text = source.value;
    text = text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    text = text.replace(/(&lt;\/?)(\w+)([^&gt;]*&gt;)/g, '$1<span class="html-tag">$2</span>$3');
    editor.innerHTML = text;
    restoreCursorPosition(cursorPosition);
    preview.innerHTML = source.value;
  }

  function showTagSuggestions(filter = '') {
    tagSuggestionMode = true;
    if (suggestionBox) {
      var boxes = Array.from(document.body.childNodes).filter(x => x == suggestionBox);
      if (boxes.length > 0)
        document.body.removeChild(suggestionBox);
      else suggestionBox = null;
    }
    suggestionBox = document.createElement('div');
    suggestionBox.id = 'suggestionBox';
    suggestionBox.style.position = 'absolute';
    suggestionBox.style.backgroundColor = '#fff';
    suggestionBox.style.border = '1px solid #ccc';
    suggestionBox.style.zIndex = '1000';
    suggestionBox.style.maxHeight = '150px';
    suggestionBox.style.overflowY = 'auto';

    var filteredTags = tagList.filter(tag => tag.startsWith(filter));
    filteredTags.forEach(function(tag) {
      var suggestionItem = document.createElement('div');
      suggestionItem.className = 'suggestionItem';
      suggestionItem.style.padding = '5px';
      suggestionItem.style.cursor = 'pointer';
      suggestionItem.textContent = tag;
      suggestionItem.addEventListener('click', function() {
        insertTag(tag);
        tagSuggestionMode = false;
        document.body.removeChild(suggestionBox);
      });
      suggestionBox.appendChild(suggestionItem);
    });

    document.body.appendChild(suggestionBox);
    var rect = getCaretCoordinates();
    suggestionBox.style.left = rect.left + 'px';
    suggestionBox.style.top = (rect.top + 20) + 'px';
  }

  function getCaretCoordinates() {
    var x = 0, y = 0;
    var selection = window.getSelection();
    if (selection.rangeCount) {
      var range = selection.getRangeAt(0).cloneRange();
      range.collapse(true);
      var rect = range.getClientRects()[0];
      if (rect) {
        x = rect.left;
        y = rect.top + window.scrollY;
      }
    }
    return { left: x, top: y };
  }

  function insertTag(tag) {
    //var selection = window.getSelection();
    //var range = selection.getRangeAt(0);
    var tagText = '<' + tag + '></' + tag + '>';
    var textNode = document.createTextNode(tagText);
    editor.append(textNode);
    // range.deleteContents();
    // range.insertNode(textNode);
    // range.setStart(textNode, tagText.length - tag.length - 3);
    // range.setEnd(textNode, tagText.length - tag.length - 3);
    // selection.removeAllRanges();
    // selection.addRange(range);
    source.value = editor.innerText;
    applySyntaxHighlighting();
  }

  var tagSuggestionMode = false;

  editor.addEventListener('input', function(e) {
    source.value = editor.innerText;
    applySyntaxHighlighting();
    if (e.inputType === 'insertText' && e.data === '<') {
      showTagSuggestions();
    } else if (e.inputType === 'insertText' && suggestionBox) {
      var text = editor.innerText;
      var lastOpenBracket = text.lastIndexOf('<');
      if (lastOpenBracket !== -1) {
        var filter = text.substring(lastOpenBracket + 1);
        showTagSuggestions(filter);
      }
    }
  });

  source.addEventListener('change', function() {
    preview.innerHTML = source.value;
  });

  applySyntaxHighlighting();
</script>

@section Header {
<style>
  label{width:18%; font-weight:normal; vertical-align:top;}
  input{width:81%}
  .html-editor{display:inline-block; width:45%; height:300px; font-family:consolas; border: 1px solid #ccc; padding: 5px; white-space: pre-wrap; overflow-wrap: break-word;}
  .html-tag{color:red; font-weight:bold;}
  .preview{display:inline-block; vertical-align:top; width:40%; border: 1px solid #ccc; padding: 5px; white-space: pre-wrap; overflow-wrap: break-word;}
  .editor input[type='submit']{display:inline-block; padding:5px 15px; margin:3px 0 0 0;}
  .editor input[name='save']{background-color:#0a0; color:#fff; border:1px solid #0b0;
    font-weight:bold; padding:9px 35px;}
  .editor input[name='cancel']{background-color:#dde; color:#999; border:1px solid #ddd;}
  .suggestionItem:hover{background-color:#eee;}
</style>
}

